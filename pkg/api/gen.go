// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for BidAuthorType.
const (
	Organization BidAuthorType = "Organization"
	User         BidAuthorType = "User"
)

// Defines values for BidDecision.
const (
	Approved BidDecision = "Approved"
	Rejected BidDecision = "Rejected"
)

// Defines values for BidStatus.
const (
	BidStatusCanceled  BidStatus = "Canceled"
	BidStatusCreated   BidStatus = "Created"
	BidStatusPublished BidStatus = "Published"
)

// Defines values for TenderServiceType.
const (
	Construction TenderServiceType = "Construction"
	Delivery     TenderServiceType = "Delivery"
	Manufacture  TenderServiceType = "Manufacture"
)

// Defines values for TenderStatus.
const (
	TenderStatusClosed    TenderStatus = "Closed"
	TenderStatusCreated   TenderStatus = "Created"
	TenderStatusPublished TenderStatus = "Published"
)

// Bid Информация о предложении
type Bid struct {
	// AuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
	AuthorId BidAuthorId `json:"authorId"`

	// AuthorType Тип автора
	AuthorType BidAuthorType `json:"authorType"`

	// CreatedAt Серверная дата и время в момент, когда пользователь отправил предложение на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Id Уникальный идентификатор предложения, присвоенный сервером.
	Id BidId `json:"id"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// Status Статус предложения
	Status BidStatus `json:"status"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`

	// Version Номер версии посел правок
	Version BidVersion `json:"version"`
}

// BidAuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
type BidAuthorId = string

// BidAuthorType Тип автора
type BidAuthorType string

// BidDecision Решение по предложению
type BidDecision string

// BidDescription Описание предложения
type BidDescription = string

// BidFeedback Отзыв на предложение
type BidFeedback = string

// BidId Уникальный идентификатор предложения, присвоенный сервером.
type BidId = string

// BidName Полное название предложения
type BidName = string

// BidReview Отзыв о предложении
type BidReview struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил отзыв на предложение.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidReviewDescription `json:"description"`

	// Id Уникальный идентификатор отзыва, присвоенный сервером.
	Id BidReviewId `json:"id"`
}

// BidReviewDescription Описание предложения
type BidReviewDescription = string

// BidReviewId Уникальный идентификатор отзыва, присвоенный сервером.
type BidReviewId = string

// BidStatus Статус предложения
type BidStatus string

// BidVersion Номер версии посел правок
type BidVersion = int32

// ErrorResponse Используется для возвращения ошибки пользователю
type ErrorResponse struct {
	// Reason Описание ошибки в свободной форме
	Reason string `json:"reason"`
}

// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
type OrganizationId = string

// Tender Информация о тендере
type Tender struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил тендер на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Id Уникальный идентификатор тендера, присвоенный сервером.
	Id TenderId `json:"id"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`

	// Status Статус тендер
	Status TenderStatus `json:"status"`

	// Version Номер версии посел правок
	Version TenderVersion `json:"version"`
}

// TenderDescription Описание тендера
type TenderDescription = string

// TenderId Уникальный идентификатор тендера, присвоенный сервером.
type TenderId = string

// TenderName Полное название тендера
type TenderName = string

// TenderServiceType Вид услуги, к которой относиться тендер
type TenderServiceType string

// TenderStatus Статус тендер
type TenderStatus string

// TenderVersion Номер версии посел правок
type TenderVersion = int32

// Username Уникальный slug пользователя.
type Username = string

// PaginationLimit defines model for paginationLimit.
type PaginationLimit = int32

// PaginationOffset defines model for paginationOffset.
type PaginationOffset = int32

// GetUserBidsParams defines parameters for GetUserBids.
type GetUserBidsParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateBidJSONBody defines parameters for CreateBid.
type CreateBidJSONBody struct {
	// AuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
	AuthorId BidAuthorId `json:"authorId"`

	// AuthorType Тип автора
	AuthorType BidAuthorType `json:"authorType"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`
}

// EditBidJSONBody defines parameters for EditBid.
type EditBidJSONBody struct {
	// Description Описание предложения
	Description *BidDescription `json:"description,omitempty"`

	// Name Полное название предложения
	Name *BidName `json:"name,omitempty"`
}

// EditBidParams defines parameters for EditBid.
type EditBidParams struct {
	Username Username `form:"username" json:"username"`
}

// SubmitBidFeedbackParams defines parameters for SubmitBidFeedback.
type SubmitBidFeedbackParams struct {
	BidFeedback BidFeedback `form:"bidFeedback" json:"bidFeedback"`
	Username    Username    `form:"username" json:"username"`
}

// RollbackBidParams defines parameters for RollbackBid.
type RollbackBidParams struct {
	Username Username `form:"username" json:"username"`
}

// GetBidStatusParams defines parameters for GetBidStatus.
type GetBidStatusParams struct {
	Username Username `form:"username" json:"username"`
}

// UpdateBidStatusParams defines parameters for UpdateBidStatus.
type UpdateBidStatusParams struct {
	Status   BidStatus `form:"status" json:"status"`
	Username Username  `form:"username" json:"username"`
}

// SubmitBidDecisionParams defines parameters for SubmitBidDecision.
type SubmitBidDecisionParams struct {
	Decision BidDecision `form:"decision" json:"decision"`
	Username Username    `form:"username" json:"username"`
}

// GetBidsForTenderParams defines parameters for GetBidsForTender.
type GetBidsForTenderParams struct {
	Username Username `form:"username" json:"username"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBidReviewsParams defines parameters for GetBidReviews.
type GetBidReviewsParams struct {
	// AuthorUsername Имя пользователя автора предложений, отзывы на которые нужно просмотреть.
	AuthorUsername Username `form:"authorUsername" json:"authorUsername"`

	// RequesterUsername Имя пользователя, который запрашивает отзывы.
	RequesterUsername Username `form:"requesterUsername" json:"requesterUsername"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetTendersParams defines parameters for GetTenders.
type GetTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// ServiceType Возвращенные тендеры должны соответствовать указанным видам услуг.
	//
	// Если список пустой, фильтры не применяются.
	ServiceType *[]TenderServiceType `form:"service_type,omitempty" json:"service_type,omitempty"`
}

// GetUserTendersParams defines parameters for GetUserTenders.
type GetUserTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateTenderJSONBody defines parameters for CreateTender.
type CreateTenderJSONBody struct {
	// CreatorUsername Уникальный slug пользователя.
	CreatorUsername Username `json:"creatorUsername"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`
}

// EditTenderJSONBody defines parameters for EditTender.
type EditTenderJSONBody struct {
	// Description Описание тендера
	Description *TenderDescription `json:"description,omitempty"`

	// Name Полное название тендера
	Name *TenderName `json:"name,omitempty"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType *TenderServiceType `json:"serviceType,omitempty"`
}

// EditTenderParams defines parameters for EditTender.
type EditTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// RollbackTenderParams defines parameters for RollbackTender.
type RollbackTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// GetTenderStatusParams defines parameters for GetTenderStatus.
type GetTenderStatusParams struct {
	Username *Username `form:"username,omitempty" json:"username,omitempty"`
}

// UpdateTenderStatusParams defines parameters for UpdateTenderStatus.
type UpdateTenderStatusParams struct {
	Status   TenderStatus `form:"status" json:"status"`
	Username Username     `form:"username" json:"username"`
}

// CreateBidJSONRequestBody defines body for CreateBid for application/json ContentType.
type CreateBidJSONRequestBody CreateBidJSONBody

// EditBidJSONRequestBody defines body for EditBid for application/json ContentType.
type EditBidJSONRequestBody EditBidJSONBody

// CreateTenderJSONRequestBody defines body for CreateTender for application/json ContentType.
type CreateTenderJSONRequestBody CreateTenderJSONBody

// EditTenderJSONRequestBody defines body for EditTender for application/json ContentType.
type EditTenderJSONRequestBody EditTenderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка ваших предложений
	// (GET /bids/my)
	GetUserBids(ctx echo.Context, params GetUserBidsParams) error
	// Создание нового предложения
	// (POST /bids/new)
	CreateBid(ctx echo.Context) error
	// Редактирование параметров предложения
	// (PATCH /bids/{bidId}/edit)
	EditBid(ctx echo.Context, bidId BidId, params EditBidParams) error
	// Отправка отзыва по предложению
	// (PUT /bids/{bidId}/feedback)
	SubmitBidFeedback(ctx echo.Context, bidId BidId, params SubmitBidFeedbackParams) error
	// Откат версии предложения
	// (PUT /bids/{bidId}/rollback/{version})
	RollbackBid(ctx echo.Context, bidId BidId, version int32, params RollbackBidParams) error
	// Получение текущего статуса предложения
	// (GET /bids/{bidId}/status)
	GetBidStatus(ctx echo.Context, bidId BidId, params GetBidStatusParams) error
	// Изменение статуса предложения
	// (PUT /bids/{bidId}/status)
	UpdateBidStatus(ctx echo.Context, bidId BidId, params UpdateBidStatusParams) error
	// Отправка решения по предложению
	// (PUT /bids/{bidId}/submit_decision)
	SubmitBidDecision(ctx echo.Context, bidId BidId, params SubmitBidDecisionParams) error
	// Получение списка предложений для тендера
	// (GET /bids/{tenderId}/list)
	GetBidsForTender(ctx echo.Context, tenderId TenderId, params GetBidsForTenderParams) error
	// Просмотр отзывов на прошлые предложения
	// (GET /bids/{tenderId}/reviews)
	GetBidReviews(ctx echo.Context, tenderId TenderId, params GetBidReviewsParams) error
	// Проверка доступности сервера
	// (GET /ping)
	CheckServer(ctx echo.Context) error
	// Получение списка тендеров
	// (GET /tenders)
	GetTenders(ctx echo.Context, params GetTendersParams) error
	// Получить тендеры пользователя
	// (GET /tenders/my)
	GetUserTenders(ctx echo.Context, params GetUserTendersParams) error
	// Создание нового тендера
	// (POST /tenders/new)
	CreateTender(ctx echo.Context) error
	// Редактирование тендера
	// (PATCH /tenders/{tenderId}/edit)
	EditTender(ctx echo.Context, tenderId TenderId, params EditTenderParams) error
	// Откат версии тендера
	// (PUT /tenders/{tenderId}/rollback/{version})
	RollbackTender(ctx echo.Context, tenderId TenderId, version int32, params RollbackTenderParams) error
	// Получение текущего статуса тендера
	// (GET /tenders/{tenderId}/status)
	GetTenderStatus(ctx echo.Context, tenderId TenderId, params GetTenderStatusParams) error
	// Изменение статуса тендера
	// (PUT /tenders/{tenderId}/status)
	UpdateTenderStatus(ctx echo.Context, tenderId TenderId, params UpdateTenderStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUserBids converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBids(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBidsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserBids(ctx, params)
	return err
}

// CreateBid converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBid(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBid(ctx)
	return err
}

// EditBid converts echo context to params.
func (w *ServerInterfaceWrapper) EditBid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params EditBidParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditBid(ctx, bidId, params)
	return err
}

// SubmitBidFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitBidFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidFeedbackParams
	// ------------- Required query parameter "bidFeedback" -------------

	err = runtime.BindQueryParameter("form", true, true, "bidFeedback", ctx.QueryParams(), &params.BidFeedback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidFeedback: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitBidFeedback(ctx, bidId, params)
	return err
}

// RollbackBid converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackBid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", ctx.Param("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackBidParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RollbackBid(ctx, bidId, version, params)
	return err
}

// GetBidStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidStatusParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidStatus(ctx, bidId, params)
	return err
}

// UpdateBidStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBidStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateBidStatusParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBidStatus(ctx, bidId, params)
	return err
}

// SubmitBidDecision converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitBidDecision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidDecisionParams
	// ------------- Required query parameter "decision" -------------

	err = runtime.BindQueryParameter("form", true, true, "decision", ctx.QueryParams(), &params.Decision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter decision: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitBidDecision(ctx, bidId, params)
	return err
}

// GetBidsForTender converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidsForTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidsForTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidsForTender(ctx, tenderId, params)
	return err
}

// GetBidReviews converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidReviews(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidReviewsParams
	// ------------- Required query parameter "authorUsername" -------------

	err = runtime.BindQueryParameter("form", true, true, "authorUsername", ctx.QueryParams(), &params.AuthorUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorUsername: %s", err))
	}

	// ------------- Required query parameter "requesterUsername" -------------

	err = runtime.BindQueryParameter("form", true, true, "requesterUsername", ctx.QueryParams(), &params.RequesterUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requesterUsername: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidReviews(ctx, tenderId, params)
	return err
}

// CheckServer converts echo context to params.
func (w *ServerInterfaceWrapper) CheckServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckServer(ctx)
	return err
}

// GetTenders converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTendersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "service_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_type", ctx.QueryParams(), &params.ServiceType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenders(ctx, params)
	return err
}

// GetUserTenders converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTenders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserTendersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTenders(ctx, params)
	return err
}

// CreateTender converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTender(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTender(ctx)
	return err
}

// EditTender converts echo context to params.
func (w *ServerInterfaceWrapper) EditTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params EditTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditTender(ctx, tenderId, params)
	return err
}

// RollbackTender converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", ctx.Param("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RollbackTender(ctx, tenderId, version, params)
	return err
}

// GetTenderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenderStatusParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenderStatus(ctx, tenderId, params)
	return err
}

// UpdateTenderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTenderStatusParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTenderStatus(ctx, tenderId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bids/my", wrapper.GetUserBids)
	router.POST(baseURL+"/bids/new", wrapper.CreateBid)
	router.PATCH(baseURL+"/bids/:bidId/edit", wrapper.EditBid)
	router.PUT(baseURL+"/bids/:bidId/feedback", wrapper.SubmitBidFeedback)
	router.PUT(baseURL+"/bids/:bidId/rollback/:version", wrapper.RollbackBid)
	router.GET(baseURL+"/bids/:bidId/status", wrapper.GetBidStatus)
	router.PUT(baseURL+"/bids/:bidId/status", wrapper.UpdateBidStatus)
	router.PUT(baseURL+"/bids/:bidId/submit_decision", wrapper.SubmitBidDecision)
	router.GET(baseURL+"/bids/:tenderId/list", wrapper.GetBidsForTender)
	router.GET(baseURL+"/bids/:tenderId/reviews", wrapper.GetBidReviews)
	router.GET(baseURL+"/ping", wrapper.CheckServer)
	router.GET(baseURL+"/tenders", wrapper.GetTenders)
	router.GET(baseURL+"/tenders/my", wrapper.GetUserTenders)
	router.POST(baseURL+"/tenders/new", wrapper.CreateTender)
	router.PATCH(baseURL+"/tenders/:tenderId/edit", wrapper.EditTender)
	router.PUT(baseURL+"/tenders/:tenderId/rollback/:version", wrapper.RollbackTender)
	router.GET(baseURL+"/tenders/:tenderId/status", wrapper.GetTenderStatus)
	router.PUT(baseURL+"/tenders/:tenderId/status", wrapper.UpdateTenderStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7qpx1Zgxa0W9ebf5zwAAAP//nzqsTiGFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
